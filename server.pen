import Core'String
import Core'String'Utf8
import Http'Context { Context }
import Http'Request { Request }
import Http'Response { Response }
import Http'Server
import Regex'Expression as Regex

import 'database { Database }
import 'logger { Logger }

type Server {
  context Context
  database Database
  logger Logger
}

New = \(ctx Context, s Database, l Logger) Server {
  Server{context: ctx, database: s, logger: l}
}

Serve = \(s Server, address string) none | error {
  logger'Info(s.logger, "serving at " + address)

  Server'Serve(
    s.context,
    address,
    \(r Request) Response {
      debug(r)

      if [resource, ...ss] = Utf8'Split(Utf8'TrimStartMatches(r.Uri, "/"), "/") {
        if resource() == "metrics" {
          if [id, ...ss] = ss {
            if [resource, ...ss] = ss {
              if resource() == "records" {
                if r.Method == "GET" {
                  getResponse("{}")
                } else if r.Method == "POST" {
                  postResponse("{}")
                } else {
                  notFound()
                }
              } else {
                notFound()
              }
            } else {
              if r.Method == "GET" {
                getResponse("{}")
              } else {
                notFound()
              }
            }
          } else {
            if r.Method == "GET" {
              getResponse("{}")
            } else if r.Method == "POST" {
              postResponse("{}")
            } else {
              notFound()
            }
          }
        } else {
          notFound()
        }
      } else {
        notFound()
      }
    },
  )
}

getResponse = \(s string) Response {
  Response{
    Status: 200,
    Headers: contentHeaders(),
    Body: s,
  }
}

postResponse = \(s string) Response {
  Response{
    Status: 201,
    Headers: contentHeaders(),
    Body: s,
  }
}

contentHeaders = \() {string: string} {
  {string: string "content-type": "text/json"}
}

notFound = \() Response {
  Response{
    Status: 404,
    Headers: {string: string},
    Body: "",
  }
}
