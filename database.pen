import Core'Number
import Core'String
import Sql'Context { Context }
import Sql'Pool { Pool }
import Sql'Pool'Options { Options }

type Value = boolean | none | number | string

type Database {
  context Context
  pool Pool
}

defaultOptions = \() Options {
  Options{
    MinConnections: 8,
    MaxConnections: 512,
    ConnectTimeout: 500,
  }
}

New = \(ctx Context, uri string) Database | error {
  Database{
    context: ctx,
    pool: Pool'New(ctx, uri, defaultOptions())?,
  }
}

Find = \(d Database, table string, fields [string], where {string: Value}) {string: Value} | error {
  if [x, ..._] = Query(d, selectQuery(table, fields, keys(where)), fields, values(where))? {
    x()
  } else {
    error(table + " not found")
  }
}

FindMany = \(d Database, table string, fields [string], where {string: Value}) [{string: Value}] | error {
  Query(d, selectQuery(table, fields, keys(where)), fields, values(where))?
}

Create = \(s Database, table string, x {string: Value}) none | error {
  Pool'Execute(s.context, s.pool, insertQuery(table, keys(x)), values(x))?

  none
}

Query = \(d Database, query string, fields [string], values [Value]) [{string: Value}] | error {
  xs = Pool'Query(d.context, d.pool, query, values)?

  [{string: Value} buildValue(fields, x()) for x in xs]
}

selectQuery = \(table string, fields [string], whereFields [string]) string {
  "select "
    + String'Join(fields, ", ")
    + " from "
    + table
    + if size(whereFields) > 0 {
      " where "
        + String'Join(
          [string
            k() + " = $" + Number'String(i())
            for k, i in whereFields, Number'Sequence(Number'Infinity())
          ],
          " and ",
        )
    } else {
      ""
    }
}

insertQuery = \(table string, ks [string]) string {
  "insert into " + table
    + " ("
    + String'Join(ks, ",")
    + ") values ("
    + String'Join(
      [string
        "$" + Number'String(i())
        for ks, i in ks, Number'Sequence(Number'Infinity())
      ],
      ",",
    )
    + ")"
}

# TODO Use a map comprehension.
buildValue = \(ks [string], vs [Value]) {string: Value} {
  if [k, ...ks] = ks {
    if [v, ...vs] = vs {
      {string: Value ...buildValue(ks, vs), k(): v()}
    } else {
      {string: Value}
    }
  } else {
    {string: Value}
  }
}
