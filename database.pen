import Core'Number
import Core'String
import Sql'Context { Context }
import Sql'Pool { Pool }
import Sql'Pool'Options { Options }

type Value = boolean | none | number | string

type Database {
  context Context
  pool Pool
}

defaultOptions = \() Options {
  Options{
    MinConnections: 8,
    MaxConnections: 512,
    ConnectTimeout: 500,
  }
}

New = \(ctx Context, uri string) Database | error {
  Database{
    context: ctx,
    pool: Pool'New(ctx, uri, defaultOptions())?,
  }
}

Find = \(s Database, table string, fields [string], where {string: Value}) {string: Value} | error {
  ks = [string k for k, _ in where]
  xs = Pool'Query(s.context, s.pool, selectQuery(table, ks) + " limit 1", [Value v for _, v in where])?

  if [x, ..._] = xs {
    buildValue(fields, x())
  } else {
    error(table + " not found")
  }
}

FindMany = \(d Database, table string, fields [string], where {string: Value}) [{string: Value}] | error {
  Query(d, selectQuery(table, [string k for k, _ in where]), fields, [Value v for _, v in where])?
}

Create = \(s Database, table string, x {string: Value}) none | error {
  Pool'Execute(
    s.context,
    s.pool,
    insertQuery(table, [string k for k, _ in x]),
    [Value v for _, v in x],
  )?

  none
}

Query = \(s Database, query string, fields [string], values [Value]) [{string: Value}] | error {
  xs = Pool'Query(s.context, s.pool, query, values)?

  [{string: Value} buildValue(fields, x()) for x in xs]
}

selectQuery = \(table string, ks [string]) string {
  "select * from " + table
    + if size(ks) > 0 {
      " where " + String'Join(placeholderMatches(ks, 1), " and ")
    } else {
      ""
    }
}

insertQuery = \(table string, ks [string]) string {
  "insert into " + table
    + " ("
    + String'Join(ks, ",")
    + ") values ("
    + String'Join(placeholders(ks, 1), ",")
    + ")"
}

placeholders = \(ks [string], i number) [string] {
  if [_, ...ks] = ks {
    [string "$" + Number'String(i), ...placeholders(ks, i + 1)]
  } else {
    [string]
  }
}

placeholderMatches = \(ks [string], i number) [string] {
  if [k, ...ks] = ks {
    [string k() + " = $" + Number'String(i), ...placeholders(ks, i + 1)]
  } else {
    [string]
  }
}

buildValue = \(ks [string], vs [Value]) {string: Value} {
  if [k, ...ks] = ks {
    if [v, ...vs] = vs {
      {string: Value ...buildValue(ks, vs), k(): v()}
    } else {
      {string: Value}
    }
  } else {
    {string: Value}
  }
}
