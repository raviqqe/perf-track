import 'application'metric { Metric, MetricInput }
import 'application'repository'metric { MetricRepository }
import 'database { Database, Value }
import 'database'utility

tableName = \() string { "metric" }

New = \(d Database) MetricRepository {
  MetricRepository{
    Create: \(m MetricInput) none | error {
      database'Create(d, tableName(), {string: Value "name": m.Name})
    },
    Find: \(id string) Metric | error {
      x = database'Find(d, tableName(), {string: Value "id": id})?

      Metric{
        Id: utility'String(utility'Column(x, "id")?)?,
        Name: utility'String(utility'Column(x, "name")?)?,
      }
    },
  }
}

buildMetrics = \(xs [{string: Value}]) [Metric] | error {
  if [x, ...xs] = xs {
    m = Metric{
      MetricId: utility'String(utility'Column(x(), "id")?)?,
      CommitHash: utility'String(utility'Column(x(), "name")?)?,
    }
    ms = buildMetrics(xs)?

    [Metric m, ...ms]
  } else {
    [Metric]
  }
}
